import requests
import os
import sys
from tqdm import tqdm
import webbrowser

def search_movie(movie_name):
    base_url = "https://yts.mx/api/v2/list_movies.json"
    params = {"query_term": movie_name}
    
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data["data"]["movie_count"] > 0:
            return data["data"]["movies"]
    return []

def download_movie(url, filename):
    response = requests.get(url, stream=True)
    total_size = int(response.headers.get('content-length', 0))
    
    with open(filename, 'wb') as f:
        progress_bar = tqdm(total=total_size, unit='B', unit_scale=True)
        for chunk in response.iter_content(chunk_size=8192):
            if chunk:
                f.write(chunk)
                progress_bar.update(len(chunk))
    progress_bar.close()

def main():
    if len(sys.argv) < 2:
        movie_name = input("Enter movie name: ")
    else:
        movie_name = " ".join(sys.argv[1:])
    
    print(f"Searching for: {movie_name}")
    movies = search_movie(movie_name)
    
    if not movies:
        print("No movies found!")
        return
    
    for i, movie in enumerate(movies):
        print(f"\n{i+1}. {movie['title']} ({movie['year']})")
        print(f"Rating: {movie['rating']}")
        print("Available qualities:", ", ".join([t['quality'] for t in movie['torrents']]))
    
    choice = int(input("\nSelect movie number (0 to exit): ")) - 1
    if choice < 0:
        return
    
    selected_movie = movies[choice]
    qualities = selected_movie['torrents']
    
    print("\nAvailable qualities:")
    for i, q in enumerate(qualities):
        print(f"{i+1}. {q['quality']} ({q['size']})")
    
    quality_choice = int(input("\nSelect quality number: ")) - 1
    selected_quality = qualities[quality_choice]
    
    # Create downloads directory if it doesn't exist
    if not os.path.exists("downloads"):
        os.makedirs("downloads")
    
    filename = f"downloads/{selected_movie['title']}_{selected_quality['quality']}.torrent"
    
    print(f"\nDownloading torrent file: {filename}")
    download_movie(selected_quality['url'], filename)
    print("\nDownload completed!")
    
    # Open the torrent file with default torrent client
    webbrowser.open(filename)

if __name__ == "__main__":
    main()
